#!/usr/bin/env python
# coding: utf_8

import os
from time import time

STUB_SETTING_JSON = {
    "LogCollector": {
        "file_path": "./temp/logA.log",
        "info_strings": ["##### AAA007", "##### AAA011", "AAA071"],
        "error_strings": ["[ERROR]"]
    }
}

BUFFER_SIZE = 21
TARGET_LINE = 10 # (BUFFER_SIZE - 1) / 2

def analyzeLog(line, buffer, info_strings, error_strings):
    # Shift the contents of the buffer.
    for idx in range(BUFFER_SIZE - 1, 0, -1):
        buffer[idx]['line'] = buffer[idx - 1]['line']
        buffer[idx]['flag'] = buffer[idx - 1]['flag']

    # Inserts a line at the beginning of the buffer.
    buffer[0]['line'] = line.strip()
    buffer[0]['flag'] = False

    # If there is a string set to "info_strings", set to True.
    buffer[TARGET_LINE]['flag'] |= any(target_string in buffer[TARGET_LINE]['line'] for target_string in info_strings)
    # If there is a string set to "error_strings", set all buffers to True.
    if any(target_string in buffer[TARGET_LINE]['line'] for target_string in error_strings):
        for idx in range(BUFFER_SIZE):
            buffer[idx]['flag'] = True

    # Output the last line of the buffer to a file.
    if buffer[BUFFER_SIZE - 1]['flag']:
        print(buffer[BUFFER_SIZE - 1]['line'])

def main():
    proc_time = time()
    print("[INFO] Start.")

    setting_json = STUB_SETTING_JSON

    for log_name, config in setting_json.items():
        file_path = config['file_path']
        info_strings = config['info_strings']
        error_strings = config['error_strings']

        # Clear the buffer.
        buffer = [{ 'line': '', 'flag': False } for _ in range(BUFFER_SIZE)]

        fi = open(file_path, 'r', newline='\n')
        for line in fi:
            analyzeLog(line, buffer, info_strings, error_strings)
        for idx in range(BUFFER_SIZE): # To complete the buffer rotation.
            analyzeLog('', buffer, info_strings, error_strings)

    print("[INFO] It's finished.")
    print("[INFO] Proc time: " + str(round((time() - proc_time))) + "s")

if __name__ == "__main__":
    main()

